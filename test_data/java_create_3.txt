Here is the requested Java code structure:

### **pom.xml**

```xml
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>solution</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
```

### **src/main/java/com/example/solution/Solution.java**

```java
package com.example.solution;

public class Solution {

    public int multiply(int a, int b) {
        return a * b;
    }
}
```

### **src/test/java/com/example/solution/SolutionTest.java**

```java
package com.example.solution;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class SolutionTest {

    @Test
    public void testMultiply() {
        Solution solution = new Solution();
        assertEquals(6, solution.multiply(2, 3));
        assertEquals(0, solution.multiply(0, 5));
        assertEquals(-15, solution.multiply(-3, 5));
    }
}
```

### **Compile**

```bash
mvn compile
```

### **Test**

```bash
mvn test
```

This setup includes:
- A `pom.xml` to manage the Maven project.
- A Java class `Solution` with the function `multiply(int a, int b)`.
- A test class `SolutionTest` that verifies the correctness of the `multiply` method using JUnit.