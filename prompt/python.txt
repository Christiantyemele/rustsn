[[[generate]]]

{{{0}}}

Write Python code that implements this function and name it `solution`. Also, write tests for this function.

Finally, create 3 files:

1. `solution.py` (contains the implementation of the function)
2. `test.py` (contains the implementation of the tests via unittest)
2. `requirements.txt` (contains information about dependencies)

You need to build this code and run the tests.

Formulate the solution in the following format:

**requirements.txt**
```txt
Contents of requirements.txt file
```
**solution.py**
```python
Contents of solution.py file
```
**test.py**
```python
Contents of test.py file
```

**Dependencies**
```bash
Commands for add dependencies
```

**Test**
```bash
Commands for running tests (unittest)
```

In the end, there will be 5 blocks: requirements.txt, solution.py, test.py, Dependencies, Test


[[[rewrite]]]

**requirements.txt**
```
{{{0}}}
```
**solution.py**
```python
{{{1}}}
```
**test.py**
```python
{{{2}}}
```

```bash
{{{3}}}
```

```console
{{{4}}}
```

```bash
{{{5}}}
```

```console
{{{6}}}
```

{{{7}}}

Rewrite Python code that implements this function and name it `solution`. Also, rewrite tests for this function.

Finally, create 3 files:

1. `solution.py` (contains the implementation of the function)
2. `test.py` (contains the implementation of the tests via unittest)
2. `requirements.txt` (contains information about dependencies)

You need to build this code and run the tests.

Formulate the solution in the following format:

**requirements.txt**
```txt
Contents of requirements.txt file
```
**solution.py**
```python
Contents of solution.py file
```
**test.py**
```python
Contents of test.py file
```

**Dependencies**
```bash
Commands for add dependencies
```

**Test**
```bash
Commands for running tests (unittest)
```

In the end, there will be 5 blocks: requirements.txt, solution.py, test.py, Dependencies, Test